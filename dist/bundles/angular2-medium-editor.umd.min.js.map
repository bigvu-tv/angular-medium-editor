{"version":3,"sources":["ng://angular2-medium-editor/medium-editor.directive.ts","ng://angular2-medium-editor/medium-editor.module.ts"],"names":["MediumEditorDirective","el","this","update","EventEmitter","prototype","ngOnInit","_this","element","nativeElement","innerHTML","model","active","placeholder","length","options","text","editor","MediumEditor","subscribe","event","editable","updateModel","refreshView","setContent","ngOnChanges","changes","isPropertyUpdated","lastViewModel","value","getContent","replace","trim","emit","ngOnDestroy","destroy","viewModel","hasOwnProperty","change","isFirstChange","ɵlooseIdentical","currentValue","Directive","args","selector","ElementRef","Input","Output","MediumEditorModule","NgModule","imports","exports","declarations"],"mappings":"oVAuBA,IAAAA,EAAA,WAgBE,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EAFSC,KAAAC,OAAS,IAAIC,EAAAA,aAgE5C,OA5DEJ,EAAAK,UAAAC,SAAA,WAAA,IAAAC,EAAAL,KACEA,KAAKM,QAAUN,KAAKD,GAAGQ,cACvBP,KAAKM,QAAQE,UAAY,4BAA8BR,KAAKS,MAAQ,SACpET,KAAKU,QAAS,EAEVV,KAAKW,aAAeX,KAAKW,YAAYC,SACvCZ,KAAKa,QAAQF,YAAc,CACzBG,KAAOd,KAAKW,cAKhBX,KAAKe,OAAS,IAAIC,EAAa,eAAgBhB,KAAKa,SACpDb,KAAKe,OAAOE,UAAU,gBAAe,SAAGC,EAAOC,GAC7Cd,EAAKe,iBAITtB,EAAAK,UAAAkB,YAAA,WACMrB,KAAKe,QACPf,KAAKe,OAAOO,WAAWtB,KAAKS,QAIhCX,EAAAK,UAAAoB,YAAA,SAAYC,GACNxB,KAAKyB,kBAAkBD,EAASxB,KAAK0B,iBACvC1B,KAAK0B,cAAgB1B,KAAKS,MAC1BT,KAAKqB,gBAOTvB,EAAAK,UAAAiB,YAAA,eACMO,EAAQ3B,KAAKe,OAAOa,aACxBD,EAAQA,EAAME,QAAQ,UAAW,IACnBA,QAAQ,gBAAiB,IACzBC,OACd9B,KAAK0B,cAAgBC,EACrB3B,KAAKC,OAAO8B,KAAKJ,IAMnB7B,EAAAK,UAAA6B,YAAA,WACEhC,KAAKe,OAAOkB,WAGdnC,EAAAK,UAAAsB,kBAAA,SAAkBD,EAASU,GACzB,IAAKV,EAAQW,eAAe,SAAY,OAAO,MAEzCC,EAASZ,EAAQf,MAEvB,QAAI2B,EAAOC,kBAGHC,EAAAA,gBAAgBJ,EAAWE,EAAOG,mCA5E7CC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6DAtBRC,EAAAA,6CA+BFC,EAAAA,MAAKH,KAAA,CAAC,gCACLG,EAAAA,MAAKH,KAAA,CAAC,sCACNG,EAAAA,MAAKH,KAAA,CAAC,qCAENI,EAAAA,OAAMJ,KAAA,CAAC,wBAgEV3C,EA9EA,gBClBA,SAAAgD,KASkC,2BATjCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,GACTC,QAAS,CACPnD,GAEFoD,aAAc,CACZpD,OAG8BgD","sourcesContent":["import {\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer,\r\n    ÉµlooseIdentical\r\n} from '@angular/core';\r\nimport * as MediumEditor from 'medium-editor';\r\n\r\n/**\r\n * Medium Editor wrapper directive.\r\n *\r\n * Examples\r\n * <medium-editor\r\n      [(editorModel)]=\"textVar\"\r\n *    [editorOptions]=\"{'toolbar': {'buttons': ['bold', 'italic', 'underline', 'h1', 'h2', 'h3']}}\"\r\n *    [editorPlaceholder]=\"placeholderVar\"></medium-editor>\r\n */\r\n@Directive({\r\n  selector: 'medium-editor'\r\n})\r\nexport class MediumEditorDirective implements OnInit, OnChanges, OnDestroy {\r\n\r\n  private lastViewModel: string;\r\n  private element: HTMLElement;\r\n  private editor: any;\r\n  private active: boolean;\r\n\r\n\t@Input('editorModel') model: any;\r\n  @Input('editorOptions') options: any;\r\n  @Input('editorPlaceholder') placeholder: string;\r\n\r\n  @Output('editorModelChange') update = new EventEmitter();\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    this.element = this.el.nativeElement;\r\n    this.element.innerHTML = '<div class=\"me-editable\">' + this.model + '</div>';\r\n    this.active = true;\r\n\r\n    if (this.placeholder && this.placeholder.length) {\r\n      this.options.placeholder = {\r\n        text : this.placeholder\r\n      };\r\n    }\r\n\r\n    // Global MediumEditor\r\n    this.editor = new MediumEditor('.me-editable', this.options);\r\n    this.editor.subscribe('editableInput', (event, editable) => {\r\n      this.updateModel();\r\n    });\r\n  }\r\n\r\n  refreshView() {\r\n    if (this.editor) {\r\n      this.editor.setContent(this.model);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes): void {\r\n    if (this.isPropertyUpdated(changes, this.lastViewModel)) {\r\n      this.lastViewModel = this.model;\r\n      this.refreshView();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit updated model\r\n   */\r\n  updateModel(): void {\r\n    let value = this.editor.getContent();\r\n    value = value.replace(/&nbsp;/g, '')\r\n                 .replace(/<p><br><\\/p>/g, '')\r\n                 .trim();\r\n    this.lastViewModel = value;\r\n    this.update.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Remove MediumEditor on destruction of directive\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.editor.destroy();\r\n  }\r\n\r\n  isPropertyUpdated(changes, viewModel) {\r\n    if (!changes.hasOwnProperty('model')) { return false; }\r\n\r\n    const change = changes.model;\r\n\r\n    if (change.isFirstChange()) {\r\n      return true;\r\n    }\r\n    return !ÉµlooseIdentical(viewModel, change.currentValue);\r\n  }\r\n}\r\n","// import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core'\r\n\r\nimport { MediumEditorDirective } from './medium-editor.directive';\r\n\r\n@NgModule({\r\n  imports: [ ],\r\n  exports: [\r\n    MediumEditorDirective\r\n  ],\r\n  declarations: [\r\n    MediumEditorDirective\r\n  ],\r\n})\r\nexport class MediumEditorModule { }"]}